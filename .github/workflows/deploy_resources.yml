# This is a basic workflow to help you get started with Actions

name: Azure CI

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: '6.0.x'
  API_SOLUTION_PATH: src/SwiftTestingFrameworkAPI/SwiftTestingFrameworkAPI.sln

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
jobs:

  get-locations:
    runs-on: ubuntu-latest
    outputs: 
      matrix: ${{ steps.get-matrix.outputs.matrix }}

    steps:
    - uses: actions/checkout@v3

    - name: Read Locations
      id: get-matrix
      run: |
        content=`cat $GITHUB_WORKSPACE/location_matrix.json`
          # the following lines are only required for multi line json
        content="${content//'%'/'%25'}"
        content="${content//$'\n'/'%0A'}"
        content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
        echo "::set-output name=matrix::$content"
 
  create-resources:
    needs: get-locations
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '#skip') }}
    continue-on-error: true
    strategy:
      matrix: ${{ fromJson(needs.get-locations.outputs.matrix) }}

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Checkout
      uses: actions/checkout@v3

    - name: Azure CLI script file
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          chmod +x $GITHUB_WORKSPACE/deploy.sh
          $GITHUB_WORKSPACE/deploy.sh stf-${{ matrix.location }} ${{ matrix.location }}

  build:
    needs: get-locations
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build with dotnet
        run: dotnet build ${{ env.API_SOLUTION_PATH }} --configuration Release

      - name: dotnet publish
        run: dotnet publish ${{ env.API_SOLUTION_PATH }} -c Release -o ${{env.DOTNET_ROOT}}/api

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: api-app
          path: ${{env.DOTNET_ROOT}}/api


  deploy:
    needs: [build, create-resources, get-locations]
    runs-on: ubuntu-latest
    if: ${{ !failure()  && !cancelled()}}
    continue-on-error: true
    strategy:
      matrix: ${{ fromJson(needs.get-locations.outputs.matrix) }}

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: Checkout
      uses: actions/checkout@v1

    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: api-app
        path: api-app

    - name: Run Azure PowerShell script
      uses: azure/powershell@v1
      id: getPublishProfile
      with:
        inlineScript: |
          $publish_profile_winapp=Get-AzWebAppPublishingProfile -ResourceGroupName stf-${{ matrix.location }} -Name "stf-${{ matrix.location }}-winapp"
          $publish_profile_linuxapp=Get-AzWebAppPublishingProfile -ResourceGroupName stf-${{ matrix.location }} -Name "stf-${{ matrix.location }}-linuxapp"
          echo ::set-output name=publish_profile_winapp::$( $publish_profile_winapp)
          echo ::set-output name=publish_profile_linuxapp::$( $publish_profile_linuxapp)
        azPSVersion: "latest"

    - name: Deploy to Azure Windows Web App
      id: deploy-to-windows-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: stf-${{ matrix.location }}-winapp
        publish-profile: ${{ steps.getPublishProfile.outputs.publish_profile_winapp }}
        package: api-app
    
    - name: Deploy to Azure Linux Web App
      id: deploy-to-linux-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: stf-${{ matrix.location }}-linuxapp
        publish-profile: ${{ steps.getPublishProfile.outputs.publish_profile_linuxapp }}
        package: api-app
